{"id":424,"date":"2023-08-25T17:22:38","date_gmt":"2023-08-25T17:22:38","guid":{"rendered":"\/\/api.jquery.com\/?p=424"},"modified":"2024-04-20T18:07:17","modified_gmt":"2024-04-20T18:07:17","slug":"jQuery.parseJSON","status":"publish","type":"post","link":"https:\/\/api.jquery.com\/jQuery.parseJSON\/","title":{"rendered":"jQuery.parseJSON()"},"content":{"rendered":"<article id=\"jQuery-parseJSON1\" class=\"entry method\"><h2 class=\"section-title\">\n<span class=\"name\">jQuery.parseJSON( json )<\/span><span class=\"returns\">Returns: <a href=\"http:\/\/api.jquery.com\/Types\/#String\">String<\/a> or <a href=\"http:\/\/api.jquery.com\/Types\/#Number\">Number<\/a> or <a href=\"http:\/\/api.jquery.com\/Types\/#Object\">Object<\/a> or <a href=\"http:\/\/api.jquery.com\/Types\/#Array\">Array<\/a> or <a href=\"http:\/\/api.jquery.com\/Types\/#Boolean\">Boolean<\/a><\/span><span class=\"version-details\">version deprecated: <a href=\"\/category\/version\/3.0\/\">3.0<\/a><\/span>\n<\/h2>\n<div class=\"entry-wrapper\">\n<p class=\"desc\"><strong>Description: <\/strong>Takes a well-formed JSON string and returns the resulting JavaScript value.<\/p>\n<ul class=\"signatures\"><li class=\"signature\">\n<h4 class=\"name\">\n<span class=\"version-details\">version added: <a href=\"\/category\/version\/1.4.1\/\">1.4.1<\/a><\/span><a id=\"jQuery-parseJSON-json\" href=\"#jQuery-parseJSON-json\"><span class=\"icon-link\"><\/span>jQuery.parseJSON( json )<\/a>\n<\/h4>\n<ul><li id=\"jQuery-parseJSON-json-json\">\n<div><strong>json<\/strong><\/div>\n<div>Type: <a href=\"http:\/\/api.jquery.com\/Types\/#String\">String<\/a>\n<\/div>\n<div>The JSON string to parse.<\/div>\n<\/li><\/ul>\n<\/li><\/ul>\n<div class=\"longdesc\" id=\"entry-longdesc\">\n    <div class=\"warning\">\n      <p>As of jQuery 3.0, <code>$.parseJSON<\/code> is deprecated. To parse JSON strings use the native <code>JSON.parse<\/code> method instead.<\/p>\n    <\/div>\n    <p>Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all invalid JSON strings:<\/p>\n    <ul>\n      <li>\n<code>\"{test: 1}\"<\/code> (test does not have double quotes around it).<\/li>\n      <li>\n<code>\"{'test': 1}\"<\/code> ('test' is using single quotes instead of double quotes).<\/li>\n      <li>\n<code>\"'test'\"<\/code> ('test' is using single quotes instead of double quotes).<\/li>\n      <li>\n<code>\".1\"<\/code> (a number must start with a digit; <code>\"0.1\"<\/code> would be valid).<\/li>\n      <li>\n<code>\"undefined\"<\/code> (<code>undefined<\/code> cannot be represented in a JSON string; <code>null<\/code>, however, can be).<\/li>\n      <li>\n<code>\"NaN\"<\/code> (<code>NaN<\/code> cannot be represented in a JSON string; direct representation of <code>Infinity<\/code> is also not permitted).<\/li>\n    <\/ul>\n    <p>The JSON standard does not permit \"control characters\" such as a tab or newline. An example like <code>$.parseJSON( '{ \"testing\":\"1\\t2\\n3\" }' )<\/code> will throw an error in most implementations because the JavaScript parser converts the string's tab and newline escapes into literal tab and newline; doubling the backslashes like <code>\"1\\\\t2\\\\n3\"<\/code> yields expected results. This problem is often seen when injecting JSON into a JavaScript file from a server-side language such as PHP.<\/p>\n    <p>Where the browser provides a native implementation of <code>JSON.parse<\/code>, jQuery uses it to parse the string. For details on the JSON format, see <a href=\"https:\/\/json.org\/\">https:\/\/json.org\/<\/a>.<\/p>\n    <p>Prior to jQuery 1.9, <code>$.parseJSON<\/code> returned <code>null<\/code> instead of throwing an error if it was passed an empty string, <code>null<\/code>, or <code>undefined<\/code>, even though those are not valid JSON.<\/p>\n  <\/div>\n<section class=\"entry-examples\" id=\"entry-examples\"><header><h2>Example:<\/h2><\/header><div class=\"entry-example\" id=\"example-0\">\n<p>Parse a JSON string.<\/p>\n<div class=\"syntaxhighlighter javascript\">\n\t<table>\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t\n\t\t\t\t<td class=\"gutter\">\n\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"line n1\">1<\/div>\n\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"line n2\">2<\/div>\n\t\t\t\t\t\n\t\t\t\t<\/td>\n\t\t\t\t\n\t\t\t\t<td class=\"code\">\n\t\t\t\t\t<pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">var<\/span> obj = jQuery.parseJSON( <span class=\"hljs-string\">'{ \"name\": \"John\" }'<\/span> );<\/code><\/div><\/div><div class=\"container\"><div class=\"line\"><code>alert( obj.name === <span class=\"hljs-string\">\"John\"<\/span> );<\/code><\/div><\/div><\/pre>\n\t\t\t\t<\/td>\n\t\t\t<\/tr>\n\t\t<\/tbody>\n\t<\/table>\n<\/div>\n\n<\/div><\/section>\n<\/div><\/article>","protected":false},"excerpt":{"rendered":"<p>Takes a well-formed JSON string and returns the resulting JavaScript value.<\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[20,76,89],"tags":[],"class_list":["post-424","post","type-post","status-publish","format-standard","hentry","category-deprecated-30","category-utilities","category-89"],"_links":{"self":[{"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/posts\/424","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/comments?post=424"}],"version-history":[{"count":2,"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/posts\/424\/revisions"}],"predecessor-version":[{"id":911,"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/posts\/424\/revisions\/911"}],"wp:attachment":[{"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/media?parent=424"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/categories?post=424"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/api.jquery.com\/wp-json\/wp\/v2\/tags?post=424"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}